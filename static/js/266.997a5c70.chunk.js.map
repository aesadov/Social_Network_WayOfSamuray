{"version":3,"file":"static/js/266.997a5c70.chunk.js","mappings":"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","sources":["webpack://social-network-1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network-1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social-network-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"inputFile\":\"ProfileInfo_inputFile__pWmXS\",\"mainPhoto\":\"ProfileInfo_mainPhoto__QU8TO\",\"contact\":\"ProfileInfo_contact__sQB8W\",\"profileData\":\"ProfileInfo_profileData__m1bqM\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusPropsType = {\n    status: string,\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n\n    const [editeMode, setEditeMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditeMode = () => {\n        setEditeMode(true)\n    }\n\n    const deactivateEditeMode = () => {\n        setEditeMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n            setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editeMode &&\n                <div>\n                    <b>Status: </b><span onDoubleClick={activateEditeMode}>{status || '------'}</span>\n                </div>\n            }\n            {editeMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditeMode}\n                           value={status}/>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport {ProfileInfoType} from '../../redux/profile-reducer';\nimport {createField, Input, Textarea} from '../../common/Forms controls/FormsControls';\nimport {InjectedFormProps, reduxForm} from 'redux-form';\nimport s from './ProfileInfo.module.css';\nimport style from '../../common/Forms controls/FormsControls.module.css';\n\n\nexport type ProfileDataFormType = {\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    aboutMe: string\n}\n\ntype ProfileDataFormOwnProps = {\n    profile: null | ProfileInfoType\n}\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormType, ProfileDataFormOwnProps> & ProfileDataFormOwnProps> = ({handleSubmit, profile , error}) => {\n\n    return <form onSubmit={handleSubmit}>\n        <div>\n            <button>save</button>\n        </div>\n        {error && <div className={style.formSummaryError}>{error}</div>}\n        <div>\n            <b>Full name:</b> {createField('Full name:', 'fullName', [], Input)}\n        </div>\n        <div>\n            <b>Looking for a job:</b> {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\n        </div>\n        <div>\n            <b>My professional skills:</b> {createField('My professional skills:', 'lookingForAJobDescription', [], Textarea)}\n        </div>\n        <div>\n            <b>About me:</b> {createField('About me:', 'aboutMe', [], Textarea)}\n        </div>\n        <div>\n            <b>Contacts:</b> {Object.keys(profile?.contacts || {}).map(key => {\n            return <div key={key} className={s.contact}>\n                <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\n            </div>\n        })}\n        </div>\n    </form>\n}\n\nconst ProfileDataReduxForm = reduxForm<ProfileDataFormType, ProfileDataFormOwnProps>({form: 'edite-profile'})(ProfileDataForm)\n\nexport default ProfileDataReduxForm","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ContactsType, ProfileInfoType} from '../../redux/profile-reducer';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport userPhoto from '../../../assets/images/user-png.png';\r\nimport ProfileDataReduxForm, {ProfileDataFormType} from './ProfileDataForm';\r\n\r\ntype ProfileInfoPropsType = {\r\n    savePhoto: (file: File) => void\r\n    isOwner: boolean,\r\n    profile: null | ProfileInfoType,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    safeProfile: (profile: ProfileDataFormType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n                                                         isOwner,\r\n                                                         profile,\r\n                                                         status,\r\n                                                         updateStatus,\r\n                                                         savePhoto,\r\n                                                         safeProfile\r\n                                                     }) => {\r\n    const [editeMode, setEditeMode] = useState<boolean>(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (profile: ProfileDataFormType) => {\r\n        safeProfile(profile).then(() => {\r\n                setEditeMode(false)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                {profile.photos &&\r\n                    <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"\"/>\r\n                }\r\n                {isOwner && <span className={s.inputFile}>\r\n                    <input type={'file'} id='input__file' onChange={onMainPhotoSelected}/>\r\n                    <label htmlFor='input__file' className='input__file-button'>Choose file</label>\r\n                </span>}\r\n                {editeMode\r\n                    ? <ProfileDataReduxForm onSubmit={onSubmit} initialValues={profile} profile={profile}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditeMode={() => {\r\n                        setEditeMode(true)\r\n                    }}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileInfoType\r\n    isOwner: boolean\r\n    goToEditeMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditeMode}) => {\r\n    return <div className={s.profileData}>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditeMode}>Edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name:</b> {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me:</b> {profile.aboutMe}\r\n\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b> {Object.keys(profile.contacts || {}).map(key => {\r\n            return <Contact key={key}\r\n                            contactTitle={key}\r\n                            contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string | null\r\n    contactValue: string | null\r\n}\r\nconst Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}:</b> {contactValue}</div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__dvM-z\",\"posts\":\"MyPosts_posts__GSiZ2\",\"addPost\":\"MyPosts_addPost__vrj7C\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\",\"like\":\"Post_like__+fQP+\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PropsType) => {\r\n\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://hips.hearstapps.com/digitalspyuk.cdnds.net/14/36/ustv-friends-10.jpg?crop=1.00xw:0.735xh;0,0.0217xh&resize=480:*' alt={'LisaK'}/>\r\n        {props.message}\r\n          <div>\r\n        <span className={s.like}>like </span><span className={s.like}>{props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {PostType} from '../../redux/profile-reducer';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\nimport {FormControl} from '../../common/Forms controls/FormsControls';\n\n\ntype MyPostsPropsType = {\n    posts: Array<PostType>\n    addPost: (newPost: string) => void\n}\ntype FormDataType = {\n    newPostText: string\n}\nconst maxlength10 = maxLengthCreator(10)\n\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\n\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\n\n    const addPost = (values: FormDataType) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={s.postBlock}>\n            <h3>My posts</h3>\n            <div>\n                <AddPostFormRedux onSubmit={addPost}/>\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n})\n\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={FormControl}\n                       name='newPostText'\n                       placeholder='Post message'\n                       validate={[required, maxlength10]}\n                       typeField='textarea'/>\n            </div>\n            <div className={s.addPost}>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst AddPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\n\nexport default MyPosts;","import MyPosts from './MyPosts/MyPosts';\nimport {addPostActionCreator, PostType} from '../redux/profile-reducer';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\nimport {Dispatch} from 'redux';\n\ntype MapStateToPropsType = {\n    posts: Array<PostType>,\n}\n\ntype MapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostActionCreator(newPostText))\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPostsContainer';\nimport {ProfileInfoType} from '../redux/profile-reducer';\nimport {ProfileDataFormType} from './ProfileInfo/ProfileDataForm';\n\ntype ProfilePropsType = {\n    savePhoto: (file: File) => void\n    isOwner: boolean,\n    profile: null | ProfileInfoType,\n    status: string,\n    updateStatus: (status: string) => void\n    safeProfile: (profile: ProfileDataFormType) => Promise<any>\n}\n\nconst Profile = (props: ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo\n                savePhoto={props.savePhoto}\n                isOwner={props.isOwner}\n                profile={props.profile}\n                status={props.status}\n                updateStatus={props.updateStatus}\n                safeProfile={props.safeProfile}\n            />\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profile;","import React, {ComponentType} from 'react';\nimport Profile from './Profile';\nimport {connect} from 'react-redux';\nimport {\n    getStatus,\n    getUserProfile,\n    ProfileInfoType,\n    safeProfile,\n    savePhoto,\n    updateStatus\n} from '../redux/profile-reducer';\nimport {AppStateType} from '../redux/redux-store';\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {compose} from 'redux';\nimport {ProfileDataFormType} from './ProfileInfo/ProfileDataForm';\n\ntype MapStateToPropsType = {\n    profile: null | ProfileInfoType,\n    status: string,\n    authorizedUserId: string,\n    isAuth: boolean,\n}\ntype MapDispatchToPropsType = {\n    getUsersProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    safeProfile: (profile: ProfileDataFormType) => Promise<any>\n}\ntype PathParamsType = {\n    userId: string,\n}\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & MapStateToPropsType & MapDispatchToPropsType\n\n\nclass ProfileContainer extends React.Component <ProfileContainerPropsType> {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUsersProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}\n                     safeProfile={this.props.safeProfile}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    isAuth: state.auth.isAuth,\n})\n\nexport default compose<ComponentType>(\n    connect(mapStateToProps, {getUsersProfile: getUserProfile, getStatus, updateStatus, savePhoto, safeProfile}),\n    withRouter,\n    //    withAuthRedirect\n)(ProfileContainer)","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["props","useState","editeMode","setEditeMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","isOwner","savePhoto","safeProfile","Preloader","photos","src","large","userPhoto","alt","id","target","files","length","htmlFor","then","initialValues","ProfileData","goToEditeMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","message","likesCount","maxlength10","maxLengthCreator","MyPosts","React","postsElements","posts","p","AddPostFormRedux","values","addPost","newPostText","Field","component","FormControl","name","placeholder","validate","required","typeField","connect","state","profilePage","dispatch","addPostActionCreator","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUsersProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","getUserProfile","withRouter","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}