{"version":3,"file":"static/js/691.4711e7e3.chunk.js","mappings":"oLACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,SCahL,EANgB,SAACA,GACb,OAAO,gBAAKC,UAAWC,EAAAA,QAAhB,SAA4BF,EAAMG,SAC5C,E,UCMD,EAPmB,SAACH,GAChB,IAAII,EAAO,YAAcJ,EAAMK,GAC/B,OAAO,gBAAKJ,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACH,SAAC,KAAD,CAASI,GAAIF,EAAb,SAAoBJ,EAAMO,QAEjC,E,uCCNKC,GAAcC,EAAAA,EAAAA,GAAiB,IAoBxBC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAlB+B,SAACX,GAC/D,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBD,KAAK,iBACLa,YAAY,qBACZC,UAAU,gBAGrB,0BACI,yCAIf,ICQD,EApBgB,SAACrB,GAEb,IAAIsB,EAAkBtB,EAAMuB,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAiBF,GAAIqB,EAAErB,IAAZqB,EAAErB,GAArC,IACjDsB,EAAmB3B,EAAMuB,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAS1B,QAAS0B,EAAE1B,SAAc0B,EAAExB,GAAxC,IAMvD,OACI,iBAAKJ,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SAAiCoB,KACjC,iBAAKrB,UAAWC,EAAAA,SAAhB,WACI,yBAAMyB,KACN,SAACjB,EAAD,CAAqBG,SATX,SAACiB,GACnB9B,EAAM+B,YAAYD,EAAOE,eAC5B,SAWJ,E,8DCxBKC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OAE1B,ECID,IAcA,GAAgBE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfiB,SAACJ,GACnB,MAAO,CACHX,YAAaW,EAAMX,YAE1B,IAEwB,SAACgB,GACtB,MAAO,CACHR,YAAa,SAACC,GACVO,GAASC,EAAAA,EAAAA,GAAmBR,GAC/B,EAER,KDdM,SAA6BS,GAUhC,OAAOH,EAAAA,EAAAA,IAAQL,EAARK,EARmB,SAACtC,GAEvB,IAAKmC,EAAwBnC,EAAxBmC,OAAWO,GAAhB,OAA6B1C,EAA7B,GAEA,OAAKmC,GACE,SAACM,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUpC,GAAI,UAErC,GAGJ,GCKD,CAGEqC,E","sources":["webpack://social-network-1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","import React from 'react';\nimport s from './../Dialogs.module.css';\n\ntype propsTypeMessage = {\n    message: string\n}\n\n\nconst Message = (props: propsTypeMessage) => {\n    return <div className={s.message}>{props.message}</div>\n}\n\n\n\nexport default Message;","import React from 'react';\nimport s from './../Dialogs.module.css';\nimport {NavLink} from 'react-router-dom';\n\ntype propsTypeDialogItem = {\n    name: string,\n    id: number\n}\n\nconst DialogItem = (props: propsTypeDialogItem) => {\n    let path = '/dialogs/' + props.id\n    return <div className={s.dialog + ' ' + s.active}>\n        <NavLink to={path}>{props.name}</NavLink>\n    </div>\n}\n\nexport default DialogItem;","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {FieldCreator} from '../../common/Forms controls/FormsControls';\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\n\nexport type FormDataType = {\n    newMessageBody: string\n}\nconst maxlength50 = maxLengthCreator(50)\n\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={FieldCreator}\n                       validate={[required, maxlength50]}\n                       name=\"newMessageBody\"\n                       placeholder=\"Enter your message\"\n                       typeField='textarea'/>\n            </div>\n\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport const AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\nimport s from './Dialogs.module.css';\nimport Message from './Message/Message';\nimport DialogItem from './DialogItem/DialogItem';\nimport {InitialStateType} from '../redux/dialogs-reducer';\nimport {AddMessageFormRedux, FormDataType} from './Message/AddMessageForm';\n\ntype DialogsPropsType = {\n    dialogsPage: InitialStateType\n    sendMessage: (newMessageBody: string) => void\n    isAuth: boolean\n}\n\n\nconst Dialogs = (props: DialogsPropsType) => {\n\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\n    let messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id}/>)\n\n    const addNewMessage = (values: FormDataType) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>{dialogsElements}</div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Dialogs;","import React, {ComponentType} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: mapStateToPropsType) => {\n\n        let {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...restProps as T}/>\n    }\n\n    return connect(mapStateToProps)(RedirectComponent)\n}","import {InitialStateType, sendMessageCreator} from '../redux/dialogs-reducer';\nimport Dialogs from './Dialogs';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\nimport {compose, Dispatch} from 'redux';\nimport {withAuthRedirect} from '../hoc/withAuthRedirect';\nimport {ComponentType} from 'react';\n\ntype MapStateToPropsType = {\n    dialogsPage: InitialStateType,\n    //isAuth: boolean\n}\ntype MapDispatchToProps = {\n    sendMessage: (newMessageBody: string) => void\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\n    return {\n        sendMessage: (newMessageBody: string) => {\n            dispatch(sendMessageCreator(newMessageBody))\n        }\n    }\n}\n\nexport default  compose<ComponentType>(\n    (connect(mapStateToProps, mapDispatchToProps)),\n    withAuthRedirect\n)(Dialogs)"],"names":["props","className","s","message","path","id","to","name","maxlength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","FieldCreator","validate","required","placeholder","typeField","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","mapStateToProps","state","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","restProps","Dialogs"],"sourceRoot":""}